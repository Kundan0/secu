x=[{'tracks': [(955, 405, 1083, 481), (951, 404, 1086, 482), (954, 404, 1087, 482), (947, 404, 1091, 482), (954, 404, 1089, 481), (954, 404, 1091, 481), (949, 404, 1098, 482), (953, 405, 1095, 483), (948, 405, 1097, 485), (953, 405, 1097, 484), (955, 405, 1101, 483), (959, 405, 1100, 482), (959, 405, 1100, 482), (961, 406, 1103, 482), (960, 405, 1107, 483), (958, 407, 1109, 485), (961, 408, 1108, 485), (962, 408, 1109, 486), (962, 409, 1111, 487), (961, 409, 1113, 487), (960, 409, 1113, 486), (958, 410, 1114, 486), (959, 410, 1114, 487), (960, 410, 1116, 486), (960, 409, 1115, 486), (961, 409, 1117, 487), (963, 409, 1118, 487), (963, 409, 1122, 487), (962, 409, 1123, 487), (965, 409, 1123, 487), (965, 410, 1125, 487), (965, 410, 1127, 488), (965, 410, 1128, 489), (965, 410, 1128, 488), (966, 409, 1129, 488), (966, 409, 1130, 488), (967, 409, 1133, 488), (969, 409, 1135, 489), (970, 410, 1140, 489), (972, 409, 1142, 490), (974, 409, 1143, 490), (975, 409, 1144, 491), (975, 408, 1147, 491), (975, 408, 1148, 491), (976, 408, 1150, 491), (977, 408, 1149, 489), (978, 408, 1152, 490), (981, 407, 1153, 491), (980, 408, 1155, 491), (981, 408, 1157, 492), (982, 409, 1158, 492), (984, 407, 1160, 491), (985, 407, 1165, 493), (986, 407, 1163, 492), (988, 406, 1163, 492), (989, 406, 1165, 492), (988, 406, 1169, 492), (990, 405, 1168, 493), (989, 406, 1171, 493), (992, 406, 1171, 493), (992, 406, 1175, 493), (995, 405, 1175, 492), (995, 407, 1177, 494), (995, 408, 1184, 495), (998, 408, 1183, 494), (1000, 409, 1186, 494), (1002, 407, 1187, 495), (1004, 407, 1189, 496), (1005, 407, 1191, 496), (1003, 407, 1195, 495), (1006, 407, 1194, 495), (1007, 407, 1195, 495), (1009, 407, 1199, 495), (1012, 406, 1199, 497), (1013, 406, 1202, 497), (1012, 407, 1209, 499), (1013, 406, 1210, 499), (1016, 405, 1211, 500), (1016, 405, 1212, 500), (1016, 404, 1215, 500), (1017, 406, 1216, 501), (1018, 405, 1216, 501), (1018, 406, 1220, 500), (1021, 406, 1220, 501), (1022, 406, 1222, 501), (1025, 405, 1221, 502), (1024, 406, 1225, 502), (1027, 406, 1225, 503), (1027, 406, 1228, 504), (1028, 406, 1231, 504), (1025, 406, 1237, 503), (1032, 403, 1234, 501), (1032, 403, 1236, 502), (1032, 403, 1240, 501), (1033, 402, 1243, 500), (1035, 403, 1243, 500), (1036, 402, 1244, 500), (1037, 401, 1245, 500), (1035, 401, 1250, 499), (1034, 400, 1255, 499), (1034, 401, 1257, 501), (1039, 401, 1254, 502), (1043, 403, 1256, 504), (1041, 404, 1269, 505), (1047, 404, 1260, 506), (1044, 404, 1262, 506), (1047, 402, 1264, 505), (1049, 402, 1267, 505), (1051, 404, 1269, 505), (1050, 404, 1273, 504), (1053, 401, 1274, 502), (1052, 399, 1276, 499), (1054, 397, 1274, 497), (1058, 398, 1275, 499), (1060, 397, 1276, 498), (1063, 398, 1277, 501), (1062, 398, 1278, 503), (1062, 399, 1278, 503), (1065, 400, 1278, 505), (1061, 399, 1279, 504), (1065, 399, 1277, 505), (1064, 399, 1278, 505), (1066, 399, 1278, 505), (1066, 399, 1279, 506), (1069, 399, 1276, 506), (1069, 400, 1277, 506), (1070, 400, 1278, 506), (1067, 400, 1279, 505), (1072, 400, 1276, 505), (1067, 399, 1279, 506), (1070, 400, 1278, 506), (1071, 400, 1278, 506), (1073, 400, 1278, 505), (1075, 400, 1277, 506), (1077, 402, 1279, 507), (1077, 402, 1279, 509), (1078, 403, 1279, 509), (1079, 402, 1279, 511), (1081, 402, 1277, 512), (1081, 401, 1276, 513), (1082, 400, 1277, 511), (1083, 400, 1277, 512), (1084, 398, 1277, 512), (1083, 400, 1278, 513), (1083, 400, 1277, 513), (1084, 399, 1278, 512), (1086, 401, 1276, 514), (1085, 399, 1277, 514), (1086, 399, 1277, 513), (1086, 399, 1278, 513), (1088, 397, 1278, 512), (1088, 399, 1278, 513), (1089, 395, 1277, 511), (1089, 398, 1277, 514), (1092, 398, 1277, 514), (1091, 398, 1277, 514), (1093, 397, 1277, 514), (1093, 397, 1278, 512), (1095, 398, 1277, 513), (1094, 398, 1277, 513), (1095, 396, 1277, 513), (1095, 397, 1278, 514), (1096, 398, 1277, 515), (1098, 399, 1276, 519), (1098, 401, 1277, 519), (1097, 402, 1278, 522), (1099, 402, 1278, 522), (1100, 403, 1278, 523), (1100, 404, 1278, 523), (1100, 405, 1278, 523), (1100, 401, 1277, 522), (1101, 399, 1277, 519), (1101, 396, 1276, 518), (1102, 395, 1277, 516), (1101, 395, 1277, 516), (1102, 396, 1276, 517), (1101, 397, 1276, 517), (1101, 397, 1276, 520), (1100, 396, 1277, 520), (1101, 396, 1276, 522), (1101, 395, 1276, 522), (1102, 394, 1276, 523), (1104, 394, 1276, 523), (1104, 396, 1279, 523), (1108, 397, 1278, 522), (1110, 397, 1277, 523), (1111, 397, 1278, 522), (1112, 395, 1278, 521), (1112, 395, 1277, 520), (1113, 396, 1277, 521), (1113, 396, 1278, 521), (1113, 397, 1279, 523), (1115, 397, 1278, 523), (1116, 397, 1277, 523), (1115, 398, 1278, 523), (1116, 397, 1278, 523), (1116, 397, 1277, 524), (1117, 399, 1276, 528), (1118, 399, 1276, 528), (1117, 398, 1277, 528), (1117, 397, 1278, 528), (1117, 397, 1278, 527), (1118, 399, 1277, 529), (1119, 400, 1277, 530), (1119, 400, 1277, 531), (1120, 401, 1278, 530), (1121, 401, 1278, 530), (1121, 401, 1277, 530), (1122, 401, 1276, 530), (1123, 399, 1276, 529), (1124, 397, 1276, 528), (1124, 394, 1277, 527), (1126, 393, 1277, 526), (1128, 394, 1277, 528), (1126, 392, 1278, 528), (1125, 395, 1279, 527), (1125, 393, 1279, 525), (1126, 392, 1277, 527), (1129, 394, 1277, 529), (1128, 395, 1278, 529), (1129, 398, 1278, 529), (1131, 399, 1277, 530), (1133, 399, 1277, 531), (1134, 399, 1277, 533), (1133, 399, 1278, 534), (1134, 400, 1278, 535), (1134, 400, 1278, 535), (1134, 399, 1278, 534)], 'id': 1, 'startIdx': 0, 'endIdx': 227, 'lastFill': 248, 'depths': [], 'velocity': []}, {'tracks': [(824, 408, 966, 500), (825, 408, 964, 500), (820, 408, 968, 500), (818, 408, 970, 502), (817, 408, 968, 501), (820, 408, 967, 501), (817, 406, 968, 500), (818, 406, 965, 499), (818, 407, 966, 499), (817, 407, 964, 499), (818, 407, 962, 499), (820, 406, 961, 498), (818, 406, 959, 498), (826, 406, 956, 497), (818, 406, 958, 498), (815, 407, 961, 498), (815, 408, 960, 499), (815, 409, 961, 500), (816, 409, 961, 500), (815, 408, 959, 499), (814, 408, 959, 498), (815, 409, 957, 498), (814, 409, 958, 499), (814, 408, 957, 498), (813, 408, 957, 497), (813, 408, 957, 497), (813, 408, 955, 496), (813, 408, 955, 497), (814, 408, 953, 498), (812, 409, 954, 498), (813, 409, 949, 498), (812, 409, 949, 498), (810, 409, 950, 498), (811, 410, 948, 498), (810, 410, 948, 498), (809, 410, 949, 498), (809, 409, 947, 497), (808, 409, 948, 497), (807, 409, 948, 496), (807, 410, 947, 496), (807, 409, 947, 498), (809, 409, 946, 497), (808, 409, 947, 497), (808, 408, 947, 497), (808, 408, 947, 497), (807, 408, 947, 497), (807, 408, 946, 496), (806, 408, 946, 497), (807, 408, 946, 497), (806, 408, 946, 497), (806, 408, 943, 497), (805, 406, 941, 496), (805, 408, 942, 496), (805, 408, 940, 496), (807, 407, 939, 496), (805, 407, 940, 496), (805, 407, 940, 496), (805, 407, 940, 496), (805, 407, 940, 496), (804, 407, 939, 494), (806, 407, 939, 495), (805, 406, 940, 493), (807, 406, 939, 493), (808, 406, 939, 495), (807, 406, 940, 494), (807, 407, 941, 495), (808, 407, 941, 495), (808, 407, 940, 496), (809, 407, 941, 496), (810, 408, 942, 495), (811, 408, 941, 495), (810, 408, 942, 494), (811, 408, 942, 495), (810, 408, 943, 495), (809, 408, 942, 495), (807, 408, 942, 495), (809, 408, 943, 495), (810, 408, 942, 493), (811, 407, 941, 493), (810, 407, 942, 492), (810, 407, 941, 493), (808, 407, 941, 492), (811, 407, 940, 492), (810, 407, 942, 494), (809, 406, 943, 494), (811, 407, 943, 496), (811, 406, 944, 496), (811, 408, 945, 497), (812, 409, 945, 497), (812, 409, 943, 496), (812, 409, 942, 496), (811, 408, 943, 494), (811, 408, 944, 493), (814, 408, 943, 493), (812, 409, 944, 492), (813, 408, 943, 494), (811, 408, 947, 493), (812, 408, 943, 493), (812, 408, 942, 493), (811, 408, 943, 492), (810, 410, 943, 492), (811, 410, 943, 492), (812, 412, 942, 491), (813, 412, 942, 492), (813, 408, 943, 492), (812, 406, 944, 492), (811, 406, 946, 491), (812, 405, 945, 491), (812, 405, 945, 491), (812, 403, 946, 489), (811, 403, 948, 487), (809, 401, 946, 486), (807, 400, 948, 484), (810, 404, 947, 488), (811, 404, 948, 488), (815, 405, 946, 490), (815, 404, 947, 491), (815, 404, 947, 491), (814, 405, 947, 491), (813, 405, 946, 489), (811, 406, 945, 489), (811, 406, 945, 489), (809, 406, 938, 490), (810, 403, 942, 487), (811, 404, 942, 487), (811, 405, 943, 486), (815, 403, 940, 486), (812, 403, 944, 485), (814, 404, 943, 487), (815, 403, 941, 486), (814, 403, 942, 486), (814, 403, 942, 486), (809, 405, 938, 488), (809, 405, 937, 488), (810, 404, 943, 489), (811, 407, 938, 489), (808, 408, 939, 488), (811, 409, 937, 486), (808, 408, 940, 487), (810, 406, 941, 489), (809, 406, 942, 488), (733, 404, 953, 489), (796, 405, 931, 486), (806, 407, 936, 490), (733, 405, 952, 492), (798, 406, 924, 491), (794, 406, 927, 491), (808, 406, 933, 492), (810, 405, 939, 491), (812, 406, 939, 489), (812, 405, 941, 488), (814, 405, 941, 488), (811, 403, 942, 484), (815, 405, 938, 484), (814, 403, 939, 485), (812, 403, 940, 484), (812, 402, 938, 484), (810, 401, 936, 483), (811, 402, 936, 483), (811, 402, 938, 483), (812, 403, 936, 483), (805, 404, 935, 486), (811, 405, 937, 486), (812, 406, 940, 488), (811, 408, 936, 489), (810, 410, 937, 490), (809, 412, 935, 491), (808, 413, 935, 492), (808, 415, 931, 493), (809, 416, 929, 493), (809, 413, 930, 491), (810, 410, 928, 488), (811, 408, 928, 486), (813, 403, 929, 486), (811, 402, 932, 486), (811, 401, 929, 483), (810, 403, 928, 484), (809, 405, 929, 485), (811, 404, 926, 483), (812, 404, 923, 483), (812, 404, 924, 484), (810, 404, 926, 484), (811, 404, 926, 484), (811, 404, 926, 484), (811, 405, 929, 486), (810, 405, 932, 487), (812, 405, 928, 486), (812, 405, 927, 486), (810, 403, 928, 482), (809, 403, 931, 482), (810, 403, 925, 481), (809, 403, 924, 481), (807, 404, 925, 480), (807, 404, 925, 480), (807, 404, 925, 480), (806, 405, 924, 481), (806, 405, 926, 482), (804, 407, 923, 484), (803, 408, 921, 484), (803, 408, 919, 484), (802, 407, 921, 482), (801, 407, 918, 480), (800, 407, 916, 481), (800, 407, 916
, 481), (800, 407, 917, 481), (800, 406, 917, 481), (799, 406, 917, 481), (800, 406, 918, 482), (799, 406, 919, 482), (802, 405, 918, 480), (802, 405, 917, 480), (801, 405, 918, 480), (801, 405, 917, 479), (800, 404, 916, 479), (799, 404, 916, 477), (800, 405, 914, 479), (800, 404, 914, 478), (800, 405, 911, 478), (800, 405, 910, 478), (799, 405, 912, 479), (801, 406, 909, 479), (799, 406, 910, 479), (799, 407, 909, 479), (798, 407, 908, 481), (798, 407, 908, 481), (796, 408, 907, 481), (796, 407, 905, 481), (795, 406, 905, 480)], 'id': 2, 'startIdx': 0, 'endIdx': 227, 'lastFill': 248, 'depths': [], 'velocity': []}, {'tracks': [(775, 412, 799, 428), (776, 411, 799, 428), (777, 410, 797, 428), (776, 410, 799, 428), (776, 410, 798, 429), (775, 410, 799, 429), (775, 412, 801, 429), (776, 412, 799, 429), (776, 412, 800, 430), (775, 412, 801, 429), (775, 412, 801, 429), (775, 412, 801, 430), (775, 412, 801, 430), (775, 412, 802, 430), (775, 412, 802, 430), (775, 413, 802, 430), (775, 413, 802, 430), (775, 413, 803, 431), (775, 413, 803, 431), (775, 413, 803, 431), (775, 413, 803, 431), (774, 414, 804, 431), (774, 414, 804, 431), (774, 414, 804, 432), (774, 414, 805, 432), (774, 414, 805, 432), (774, 414, 805, 432), (774, 414, 805, 432), (435, 418, 467, 435), (727, 415, 759, 433), (725, 415, 757, 433), (722, 415, 755, 433), (720, 416, 753, 433), (717, 416, 751, 434), (715, 416, 749, 434), (713, 416, 747, 434), (710, 416, 745, 434), (708, 416, 743, 434)], 'id': 5, 'startIdx': 79, 'endIdx': 116, 'lastFill': 130, 'depths': [], 'velocity': []}, {'tracks': [], 'id': 21, 'startIdx': 228, 'endIdx': 227, 'lastFill': 232, 'depths': [], 'velocity': []}, {'tracks': [], 'id': 23, 'startIdx': 223, 'endIdx': 222, 'lastFill': 241, 'depths': [], 'velocity': []}, {'tracks': [], 'id': 25, 'startIdx': 234, 'endIdx': 233, 'lastFill': 234, 'depths': [], 'velocity': []}]
# l=len(x)
# print("tot",l)
# print(x[5])
# count=0
# for i in range(l):
#     print("count",count," ",len(x[i]["tracks"]))
#     count+=1
#     if len(x[i]["tracks"])==0:
#         print("hi")
#         x.remove(x[i])



def remove_empty():
    empty_count=0
    loc=0
    for l,each_elem in enumerate(x):
        if len(each_elem["tracks"])==0:
            loc=l
            empty_count+=1
        else:
            continue
        if empty_count:
            x.pop(loc)
            remove_empty()
        else:
            return 
print("len of x",len(x))
remove_empty()
for loc,each_elem in enumerate(x):
    if len(each_elem["tracks"])==0:
        print("loc",loc)
print("len of x ",len(x))
    